{
  "permissions": {
    "allow": [
      "Bash(npm run:*)",
      "Bash(packages/cli/dist/promptcode:*)",
      "Bash(./dist/promptcode preset info cli-analysis)",
      "Bash(chmod:*)",
      "Bash(git add:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(bun add:*)",
      "Bash(bun run build:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh run watch:*)",
      "Bash(npm install)",
      "Bash(git tag:*)",
      "Bash(echo \"Run status: $?\")",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(./dist/promptcode:*)",
      "Bash(bun test:*)",
      "Bash(gh api:*)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode preset create test-preset --path /tmp/test-dir)",
      "Bash(PROMPTCODE_TEST=1 bun test)",
      "Bash(PROMPTCODE_TEST=1 bun test test/cli-parsing.test.ts --only)",
      "Bash(PROMPTCODE_TEST=1 OPENAI_API_KEY=\"\" ../dist/promptcode \"Why is this slow?\" src/**/*.ts)",
      "Bash(mkdir:*)",
      "Bash(PROMPTCODE_TEST=1 OPENAI_API_KEY=\"\" ../dist/promptcode \"Why is this slow?\" 'src/**/*.ts')",
      "Bash(PROMPTCODE_TEST=1 OPENAI_API_KEY=\"\" ./dist/promptcode \"Why is this slow?\" 'src/**/*.ts')",
      "Bash(PROMPTCODE_TEST=1 bun test test/cli-parsing.test.ts)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(bun test:*)",
      "Bash(./dist/promptcode cc:*)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(CI=true ./dist/promptcode generate --dry-run)",
      "WebFetch(domain:openai.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:sdk.vercel.ai)",
      "WebFetch(domain:ai-sdk.dev)",
      "WebFetch(domain:platform.openai.com)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert --models)",
      "Bash(PROMPTCODE_MOCK_LLM=1 PROMPTCODE_TEST=1 ./dist/promptcode expert \"What is the latest version of React?\" --no-web-search src/index.ts)",
      "Bash(PROMPTCODE_MOCK_LLM=1 PROMPTCODE_TEST=1 ./dist/promptcode expert \"What is the latest version of React?\" --web-search src/index.ts)",
      "Bash(npx tsc:*)",
      "Bash(npm ls:*)",
      "Bash(PROMPTCODE_MOCK_LLM=1 PROMPTCODE_TEST=1 ./dist/promptcode expert \"What are the latest features in Next.js 15?\" --web-search src/index.ts)",
      "Bash(PROMPTCODE_MOCK_LLM=1 PROMPTCODE_TEST=1 ./dist/promptcode expert \"Review this code\" --no-web-search src/index.ts)",
      "Bash(PROMPTCODE_MOCK_LLM=1 PROMPTCODE_TEST=1 ./dist/promptcode:*)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"What are the latest features in Next.js 15?\" --model o3 --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"What happened in tech news today?\" --model grok-4 --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"test\" --help)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test question\" --model grok-4 --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"What are the latest features in Next.js 15?\" --model opus-4 --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"What are the breaking changes in React 19?\" --model sonnet-4 --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Current Bitcoin price\" --model grok-4 --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test without web search\" --model grok-4 --no-web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"What are the breaking changes in React 19?\" --model gemini-2.5-pro --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Latest AI developments\" --model grok-beta --web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"What are the latest TypeScript features I should use in this code?\" src/providers/models.ts --model grok-4 --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"Latest TypeScript features in 2024\" --model gemini-2.5-flash --web-search --yes)",
      "Bash(DEBUG=promptcode:*)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test debug logging\" --model grok-4 --web-search --yes)",
      "Bash(XAI_API_KEY=test-key PROMPTCODE_TEST=1 ./dist/promptcode expert \"What happened in tech news today?\" --model grok-4 --web-search)",
      "Bash(cat:*)",
      "Bash(gh release view:*)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test\" --model gpt-5 --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test\" --model gpt-5 --verbosity high --reasoning-effort minimal --service-tier flex --yes)",
      "Bash(node:*)",
      "Bash(gh release list:*)",
      "Bash(gh pr list:*)",
      "Bash(bun build:*)",
      "Bash(bash:*)",
      "Bash(command -v:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(rm:*)",
      "Bash(~/.local/bin/promptcode:*)",
      "Bash(npx eslint:*)",
      "Bash(bun install:*)",
      "Bash(promptcode preset create:*)",
      "Bash(promptcode preset:*)",
      "Bash(promptcode:*)",
      "Bash(PROMPTCODE_TEST=1 packages/cli/dist/promptcode cc --uninstall --path /tmp/test-promptcode-install)",
      "Bash(test:*)",
      "Bash(cp:*)",
      "Bash(bun run:*)",
      "Bash(bun:*)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cursor --path test-cursor-integration --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cursor --path ~ --yes)",
      "Bash(gh pr view:*)",
      "Bash(git pull:*)",
      "Bash(echo:*)",
      "Bash(npm test)",
      "WebSearch",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert --models --json)",
      "Bash(PROMPTCODE_TEST=1 OPENAI_API_KEY=test ./dist/promptcode expert \"Test question\" --model gpt-5 --estimate-cost --json)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"Test question\" --model gpt-5 --estimate-cost)",
      "Bash(./packages/cli/dist/promptcode generate:*)",
      "Bash(OPENAI_API_KEY=test-key ./dist/promptcode expert \"Test\" --model gpt-5 --estimate-cost --json)",
      "Bash(PROMPTCODE_TEST=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Analyze this\" --model o3-pro -f \"src/index.ts\")",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Test\" --model o3-pro --cost-threshold 0.001)",
      "Bash(CI=true NO_COLOR=1 PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Analyze this\" --model o3-pro --cost-threshold 0.001)",
      "Bash(timeout 10 bun test:*)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Analyze this\" --model o3-pro)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key timeout 1 ./dist/promptcode expert \"Analyze this\" --model o3-pro)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Analyze this\" --model o3-pro 1)",
      "Bash(/dev/null)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key /Users/aviv.s/workspace/reference-projects/promptcode-vscode/packages/cli/dist/promptcode expert \"Analyze this\" --model o3-pro)",
      "Bash(if [[ -n \"$GOOGLE_API_KEY\" ]])",
      "Bash(else echo \"No Google API key found\")",
      "Bash(fi)",
      "Bash(/Users/aviv.s/.local/bin/promptcode:*)",
      "Bash(./packages/cli/dist/promptcode:*)",
      "Bash(PROMPTCODE_TEST=1 bun test test/commands/expert.test.ts)",
      "Bash(../../dist/promptcode preset optimize cli-core-review:*)",
      "Bash(sed:*)",
      "WebFetch(domain:docs.cursor.com)",
      "Bash(\"../../src/**/*.{ts,tsx,js,jsx}\" )",
      "Bash(\"../../scripts/**/*.{js,ts}\" )",
      "Bash(\"../../.github/workflows/*.{yml,yaml}\" )",
      "Bash(\"../../.claude/**/*.{md,json}\" )",
      "Bash(\"../../src/webview/**/*.{css,html}\" )",
      "Bash(npx @vscode/vsce package:*)",
      "WebFetch(domain:code.visualstudio.com)",
      "WebFetch(domain:vscode-api.js.org)",
      "Bash(git log:*)",
      "Bash(npx playwright install:*)",
      "Bash(../../packages/cli/dist/promptcode preset info:*)",
      "Bash(../dist/promptcode preset info test-infrastructure-review)",
      "Bash(../../packages/cli/dist/promptcode generate:*)",
      "Bash(npx playwright test:*)",
      "Bash(PROMPTCODE_TEST=1 bun test test/commands/expert.test.ts -t \"allows patterns with .. but warns about external files\")",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"test\" -f \"../../**/*.pem\")",
      "Bash(CI=1 npm run test:unit)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode expert \"test\" -f \"src/**/*.ts\")",
      "Bash(gh run cancel:*)",
      "Bash(gtimeout:*)",
      "Bash(npm test:*)",
      "Bash(XAI_API_KEY=test-key PROMPTCODE_TEST=1 ./dist/promptcode expert \"Test question\" --model grok-4 --yes)",
      "Bash(awk:*)",
      "Bash(XAI_API_KEY=test-key PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test question\" --model grok-4 --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test question\" --model gpt-5 --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test question\" --model gpt-5 --no-web-search --yes)",
      "Bash(XAI_API_KEY=test-key PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test question\" --model grok-4 --no-web-search --yes)",
      "Bash(PROMPTCODE_TEST=1 bun test test/commands/expert.test.ts -t \"allows grok-4 model\")",
      "Bash(XAI_API_KEY=test-key PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test\" --model grok-4 --no-web-search --yes --json)",
      "Bash(XAI_API_KEY=test-key PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 ./dist/promptcode expert \"Test question\" --model grok-4 --no-web-search --yes --files \"README.md\")",
      "Bash(npm install:*)",
      "WebFetch(domain:cookbook.openai.com)",
      "Bash(git restore:*)",
      "Bash(git checkout:*)",
      "Bash(git fetch:*)",
      "Bash(npx esbuild:*)",
      "Bash(npx vsce ls:*)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Analyze\" --model o3-pro --json)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Analyze\" --model o3-pro --json --yes)",
      "Bash(gh workflow run:*)",
      "Bash(PROMPTCODE_TEST=1 ./promptcode cc --path /tmp/test-cc-dx --yes)",
      "Bash(PROMPTCODE_TEST=1 /Users/aviv.s/workspace/reference-projects/promptcode-vscode/packages/cli/dist/promptcode cc --path /tmp/test-cc-dx --uninstall)",
      "Bash(PROMPTCODE_TEST=1 bun test test/commands/cc.test.ts)",
      "Bash(for:*)",
      "Bash(head:*)",
      "Bash(done)",
      "Bash(\"decoration-bug-analysis.patterns\" )",
      "Bash(\"decoration-complete-fix-review.patterns\" )",
      "Bash(\"decoration-fix-review.patterns\" )",
      "Bash(\"test-failures-analysis.patterns\" )",
      "Bash(\"test-failures-debug.patterns\" )",
      "Bash(\"test-fix-context.patterns\" )",
      "Bash(\"test-hanging-issue.patterns\" )",
      "Bash(\"ci-test-failure-investigation.patterns\" )",
      "Bash(\"ui-selection-fixes.patterns\" )",
      "Bash(\"vsix-review.patterns\" )",
      "Bash(\"file-selection-ui-analysis.patterns\" )",
      "Bash(\"cto-review-fixes.patterns\" )",
      "Bash(\"final-comprehensive-review.patterns\" )",
      "Bash(\"final-review-changes.patterns\" )",
      "Bash(\"final-simplified-review.patterns\" )",
      "Bash(\"final-status-review.patterns\" )",
      "Bash(\"implementation-review.patterns\" )",
      "Bash(\"optimization-security-review.patterns\" )",
      "Bash(\"path-resolution-review.patterns\" )",
      "Bash(\"performance-review-complete.patterns\" )",
      "Bash(\"security-hardening-review.patterns\" )",
      "Bash(\"complete-e2e-review.patterns\" )",
      "Bash(\"domain-boundaries-review.patterns\" )",
      "Bash(\"domain-boundaries-full-review.patterns\" )",
      "Bash(\"preset-optimization-changes.patterns\" )",
      "Bash(\"search-comparison.patterns\" )",
      "Bash(\"pattern-optimization.patterns\" )",
      "Bash(\"integration-enhancement.patterns\" )",
      "Bash(\"install-update-flow.patterns\" )",
      "Bash(\"All source and test files for VS Code extension debugging.patterns\" )",
      "Bash(\"vscode-extension-debug.patterns\")",
      "Bash(npm version:*)",
      "Bash(gh issue list:*)",
      "Bash(./scripts/check-csp.sh:*)",
      "Bash(npx jest:*)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cc --path /tmp/test-cc-dx --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cc docs update --path /tmp/test-cc-dx)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cc --with-docs --path /tmp/test-cc-dx --yes)",
      "Bash(PROMPTCODE_TEST=1 /Users/aviv.s/workspace/reference-projects/promptcode-vscode/packages/cli/dist/promptcode cc --yes)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cc --yes)",
      "Bash(kill:*)",
      "Bash(tty)",
      "Bash(timeout:*)",
      "Bash(pkill:*)",
      "Bash(gh issue:*)",
      "Bash(PROMPTCODE_TEST=1 CI=true bun test test/cli-parsing.test.ts --bail=1 --timeout 5000)",
      "Bash(PROMPTCODE_TEST=1 CI=true bun test --bail=1 --timeout 5000)",
      "Bash(PROMPTCODE_TEST=1 CI=true bun test test/cli-parsing.test.ts --bail=1)",
      "Bash(PROMPTCODE_TEST=1 CI=true bun test --bail=1 --timeout 10000)",
      "Bash(PROMPTCODE_TEST=1 CI=true bun test test/cli-parsing.test.ts -t \"should show help when no arguments provided\")",
      "Bash(wc:*)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode cc --path /tmp/test-cc-templates --yes)",
      "Bash(git init:*)",
      "Bash(PROMPTCODE_TEST=1 promptcode cc --yes)",
      "Bash(PROMPTCODE_TEST=1 PROMPTCODE_MOCK_LLM=1 OPENAI_API_KEY=test-key ./dist/promptcode expert \"Test question\" --model gpt-5 --no-web-search --yes)",
      "Bash(OPENAI_API_KEY=\"\" ./dist/promptcode expert \"Test question\" --model gpt-5 --estimate-cost)",
      "Bash(git describe:*)",
      "Bash(gh pr create:*)",
      "Bash(NONINTERACTIVE=1 bash /Users/aviv.s/workspace/reference-projects/promptcode-vscode/packages/cli/scripts/install.sh)",
      "Bash(git branch:*)",
      "Bash(:*promptcode:*)",
      "Bash(PROMPTCODE_TEST=1:*)",
      "Bash(:*prompt-file:*)",
      "Bash(:*estimate-cost:*)",
      "Bash(mktemp:*)",
      "Bash(TMP:*)",
      "Bash(PROMPT_FILE:*)",
      "Bash(CODE_FILE:*)",
      "Bash(SYNTHESIS_FILE:*)",
      "Read(/tmp/*)",
      "Read(/var/*)",
      "Write(/tmp/*)",
      "Write(/var/*)",
      "Edit(/tmp/*)",
      "Edit(/var/*)",
      "Edit(.promptcode/presets/*)",
      "Bash(command -v:*)",
      "Bash(cursor:*)",
      "Bash(code:*)",
      "Bash(echo:*)",
      "Bash(cat:*)",
      "Bash(xdg-open:*)",
      "Bash(open:*)",
      "Bash(wc:*)",
      "Bash(date:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(ls:*)",
      "Bash(pwd:*)",
      "Bash(export:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(awk:*)",
      "Bash(tr:*)",
      "Bash(cut:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(rm:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(which:*)",
      "Bash(test:*)",
      "Bash([[:*)",
      "Bash(if:*)",
      "Bash(elif:*)",
      "Bash(else:*)",
      "Bash(fi:*)",
      "Bash(for:*)",
      "Bash(do:*)",
      "Bash(done:*)",
      "Bash(:*&&:*)",
      "Bash(:*||:*)",
      "Bash(:*>:*)",
      "Bash(:*>>:*)",
      "Bash(:*<<:*)",
      "Bash(:*EOF:*)",
      "Bash($(:*))",
      "Bash(${:*)",
      "Bash(jq:*)",
      "Bash(:*2>/dev/null:*)",
      "Bash(:*|:*grep:*)",
      "Bash(:*|:*jq:*)",
      "Bash(:*|:*head:*)",
      "Bash(:*|:*tail:*)",
      "Bash(/tmp/test-promptcode-install.sh:*)",
      "Bash(/tmp/test-cli-flows.sh:*)",
      "Bash(/Users/aviv.s/workspace/reference-projects/promptcode-vscode/packages/cli/dist/promptcode cc:*)",
      "Bash(PROMPTCODE_TEST=1 CI=true bun test --bail=1)",
      "Bash(XDG_CONFIG_HOME=/tmp/test-xdg-config XDG_CACHE_HOME=/tmp/test-xdg-cache node -e:*)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode preset create test-mixed --from-files \"src/**/*.ts\" \"src/utils\" \"package.json\" \"README.md\" --path /tmp/test-promptcode)",
      "Bash(PROMPTCODE_TEST=1 ./dist/promptcode preset create test-real-mixed --from-files \"src/**/*.ts\" \"src/utils\" \"test\" \"package.json\")",
      "Bash(/tmp/test-promptcode:*)",
      "Bash(PROMPTCODE_SKIP_FINALIZE=1 PROMPTCODE_TEST=1 bun test test/cli-parsing.test.ts)",
      "Bash(\"packages/cli/src/index.ts\" )",
      "Bash(\"packages/cli/src/commands/update.ts\" )",
      "Bash(\"packages/cli/final-review-prompt.md\" )",
      "Bash(\"packages/cli/test-results.md\" )",
      "Bash(\"test/**/*.test.ts\" )",
      "Bash(\"test/**/*.ts\" )",
      "Bash(\"src/early-update.ts\" )",
      "Bash(\"src/commands/update.ts\" )",
      "Bash(\"src/commands/uninstall.ts\" )",
      "Bash(\"src/utils/update-checker.ts\" )",
      "Bash(\"scripts/install.sh\" )",
      "Bash(\"scripts/install.ps1\" )",
      "Bash(\"package.json\" )",
      "Bash(\"bun.lockb\" )",
      "Bash(\".github/workflows/build-cli.yml\" )",
      "Bash(\".github/workflows/promote-cli.yml\")",
      "Bash(\"packages/cli/test/**/*.test.ts\" )",
      "Bash(\"packages/cli/test/**/*.ts\" )",
      "Bash(\"packages/cli/src/commands/update.ts\" )",
      "Bash(\"packages/cli/src/commands/uninstall.ts\" )",
      "Bash(\"packages/cli/src/utils/update-checker.ts\" )",
      "Bash(\"packages/cli/src/utils/paths.ts\" )",
      "Bash(\"packages/cli/scripts/install.sh\" )",
      "Bash(\"packages/cli/scripts/install.ps1\" )",
      "Bash(\"packages/cli/package.json\" )",
      "Bash(\".github/workflows/build-cli.yml\")",
      "Bash(\"packages/cli/src/commands/update.ts\" )",
      "Bash(\"packages/cli/src/commands/uninstall.ts\" )",
      "Bash(\"packages/cli/src/utils/update-checker.ts\" )",
      "Bash(\"packages/cli/src/utils/paths.ts\" )",
      "Bash(\"packages/cli/scripts/install.sh\" )",
      "Bash(\"packages/cli/scripts/install.ps1\" )",
      "Bash(\"packages/cli/test/e2e/self-update.test.ts\" )",
      "Bash(\"packages/cli/test/e2e/installer.test.ts\" )",
      "Bash(\"packages/cli/package.json\" )",
      "Bash(\"packages/cli/test/e2e/self-update.test.ts\" )",
      "Bash(\"packages/cli/test/e2e/installer.test.ts\" )",
      "Bash(\"packages/cli/test/e2e/early-finalizer.test.ts\" )",
      "Bash(\"packages/cli/src/commands/update.ts\" )",
      "Bash(\"packages/cli/src/utils/environment.ts\" )",
      "Bash(\"packages/cli/package.json\")",
      "Bash(curl:*)",
      "Bash(./promptcode --version)",
      "Bash(./promptcode-old --version)",
      "Read(/var/folders/03/g5gpxknx1jnfjjqtfd9kz0q00dwnyv/T/**)",
      "Read(/var/folders/03/g5gpxknx1jnfjjqtfd9kz0q00dwnyv/T/**)",
      "Read(/var/folders/03/g5gpxknx1jnfjjqtfd9kz0q00dwnyv/T/**)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "/tmp",
      "/Users/aviv.s/workspace",
      "/Users/aviv.s/.local/bin"
    ]
  }
}